name: Deploy Lambda Function

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Start timer
        id: start_timer
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        shell: bash

      - uses: actions/checkout@v3

      - name: Install zip tool
        run: sudo apt-get install zip -y

      - name: Create Zip file for Lambda function
        run: zip -r code.zip .

      - name: Update Lambda Function Code
        uses: aws-actions/aws-cli@v1
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: "ca-central-1"
          cli_subcommand: |
            lambda update-function-code \
              --function-name arn:aws:lambda:ca-central-1:654654208693:function:testfunction \
              --zip-file fileb://code.zip

      - name: Stop timer and calculate duration
        id: stop_timer
        run: |
          BUILD_END_TIME=$(date +%s)
          BUILD_START_TIME=${{ steps.start_timer.outputs.start_time }}
          BUILD_DURATION=$((BUILD_END_TIME - BUILD_START_TIME))
          echo "BUILD_DURATION=$BUILD_DURATION" >> $GITHUB_ENV
          echo "Build duration: $BUILD_DURATION seconds"
        shell: bash

      - name: Send build duration to Dynatrace
        run: |
          echo "Sending build duration: $BUILD_DURATION seconds"
          curl -X POST "${{ secrets.DYNATRACE_URL }}/api/v2/metrics/ingest" \
            -H "Content-Type: text/plain" \
            -H "Authorization: Api-Token ${{ secrets.DYNATRACE_API_TOKEN }}" \
            --data-raw "github.build.duration,build_time=seconds $BUILD_DURATION"
        shell: bash

      - name: Send build status to Dynatrace
        if: always()
        run: |
          BUILD_STATUS="${{ job.status }}"
          if [ "$BUILD_STATUS" == "success" ]; then
            EVENT_TITLE="Build Succeeded"
          else
            EVENT_TITLE="Build Failed"
          fi

          echo "Sending build status: $BUILD_STATUS"

          # Prepare the JSON payload
          EVENT_PAYLOAD=$(cat <<EOF
{
  "eventType": "CUSTOM_INFO",
  "source": "GitHub Actions",
  "description": "Build $BUILD_STATUS for job '${{ github.job }}' in workflow '${{ github.workflow }}'.",
  "title": "$EVENT_TITLE",
  "attachRules": {
    "tagRule": [
      {
        "meTypes": ["CUSTOM_DEVICE"],
        "tags": [
          {
            "context": "CONTEXTLESS",
            "key": "GitHubRepository",
            "value": "${{ github.repository }}"
          }
        ]
      }
    ]
  },
  "customProperties": {
    "workflow": "${{ github.workflow }}",
    "job": "${{ github.job }}",
    "run_id": "${{ github.run_id }}",
    "run_number": "${{ github.run_number }}"
  }
}
EOF
          )

          # Send the event to Dynatrace
          curl -X POST "${{ secrets.DYNATRACE_URL }}/api/v1/events/ingest" \
            -H "Content-Type: application/json" \
            -H "Authorization: Api-Token ${{ secrets.DYNATRACE_API_TOKEN }}" \
            -d "$EVENT_PAYLOAD"
        shell: bash
